{"version":3,"sources":["markdown/markdown.js"],"names":["library","add","faUnlink","faPlayCircle","faLink","faRedoAlt","faMobileAlt","faIdBadge","faCommentDots","Markdown","input","setInput","preview","setPreview","updatePreview","inputValue","markdown","toHTML","event","target","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AAmBA;;;;AACA;;AACA;;;;;;;;;;AAXAA,4BAAQC,GAAR,CACEC,2BADF,EAEEC,+BAFF,EAGEC,yBAHF,EAIEC,4BAJF,EAKEC,8BALF,EAMEC,4BANF,EAOEC,gCAPF;;;AAaA,IAAMC,WAAW,SAAXA,QAAW,GAAM;AAAA;;AAAA,oBAEO,2DAFP;AAAA;AAAA,QAEZC,KAFY;AAAA,QAELC,QAFK;;AAAA,qBAIW,qBAAS,EAAT,CAJX;AAAA;AAAA,QAIZC,OAJY;AAAA,QAIHC,UAJG;;AAMnB,QAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,UAAD,EAAgB;AAClCJ,iBAASI,UAAT;AACAF,mBAAWG,mBAASC,MAAT,CAAgBF,UAAhB,CAAX;AACH,KAHD;;AAKA,WACI;AAAA;AAAA,UAAK,WAAU,kBAAf;AACI;AAAA;AAAA,cAAK,WAAU,eAAf;AACA;AAAA;AAAA,0CAAU,SAAM,YAAhB,EAA6B,MAAK,GAAlC,EAAsC,MAAK,IAA3C,EAAgD,SAAS,wBAAS;AAACD,sCAAcI,MAAMC,MAAN,CAAaC,KAA3B;AAAkC;AAArG,iEACS,GADT,iDACkB,GADlB;AAEKV;AAFL,aADA;AAKA;AAAA;AAAA,kBAAK,WAAU,mBAAf;AAAA;AAAA,aALA;AAMKE;AANL;AADJ,KADJ;AAYH,CAvBD;;kBAyBeH","file":"markdown.862795fc.map","sourceRoot":"..","sourcesContent":["import React, { useState } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUnlink,\n  faPlayCircle,\n  faLink,\n  faRedoAlt,\n  faMobileAlt,\n  faIdBadge,\n  faCommentDots\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(\n  faUnlink,\n  faPlayCircle,\n  faLink,\n  faRedoAlt,\n  faMobileAlt,\n  faIdBadge,\n  faCommentDots\n);\nimport PropTypes from \"prop-types\";\nimport \"./markdown.styl\";\nimport markdown from 'markdown';\n\nconst Markdown = () => {\n\n    const [input, setInput] = useState(```An h1 header\n    ============```);\n    const [preview, setPreview] = useState(\"\");\n\n    const updatePreview = (inputValue) => {\n        setInput(inputValue);\n        setPreview(markdown.toHTML(inputValue));\n    };\n\n    return (\n        <div className=\"markdown-wrapper\">\n            <div className=\"markdown-area\" >\n            <textarea class=\"text-input\" rows=\"6\" cols=\"60\" onInput={event => {updatePreview(event.target.value)}}\n                rows=\"1\" cols=\"1\">\n                {input}\n            </textarea>\n            <div className=\"preview text_side\"> </div>\n                {preview}\n            </div>\n        </div>\n    );\n};\n\nexport default Markdown;\n"]}